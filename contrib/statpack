#! /bin/bash

# Pack ralsh and supporting files so they can be copied into a Docker
# container. This works on Fedora 25, provided you have the following
# packages installed:
#
# dnf install upx glibc-static libxml2-static zlib-static xz-static libselinux-static
#
# Also, you need to install puppet-agent to build this (we only use that
# for the static libs for augeas, since regrettably Fedora does not ship
# augeas-static yet, see
# https://bugzilla.redhat.com/show_bug.cgi?id=1405600)
#

topdir=$(readlink --canonicalize $(dirname $0)/..)

# Build everything
cd ${abs_top_builddir:-$topdir/build}

if [ ! -f CMakeCache.txt ]; then
    echo "set abs_top_builddir to the directory where libral is built"
    exit 1
fi

srcdir=$(grep SOURCE_DIR CMakeCache.txt | cut -d = -f 2)
githash=$(cd $srcdir && git describe --always)

make

# Assemble stuff in ral/
rm -rf ral
mkdir -p ral/bin
cp ./bin/ralsh ral/bin/ralsh.bin
cp ./bin/mruby ./bin/mirb ral/bin

cat > ral/README <<EOF
This is a statically linked build of https://github.com/puppetlabs/libral.

It was made from commit $githash of that repo on a $(cat /etc/system-release)
machine. The executable should work on any $(uname -m) Linux machine
that has $(rpm -q glibc) or later.
EOF

cp -pr ${topdir}/data ral

#
# Snarf up some augeas lenses that we need
#
if [ ! -x augparse ]
then
    if [ -x /opt/puppetlabs/puppet/bin/augparse ]; then
        export PATH=$PATH:/opt/puppetlabs/puppet/bin
    else
        echo "could not find augparse anywhere"
        exit 1
    fi
fi

# Terrible hack to help us find builtin lenses we use without any
# modification
cat > ral/data/lenses/dep.aug <<EOF
module Dep =
let l1 = Authorized_keys.lns
EOF
# Have augparse tell us all the lenses we need
for lns in ral/data/lenses/*.aug
do
    cp -np $(augparse --notypecheck --trace $lns | cut -d ' ' -f 2 | grep ^/) ral/data/lenses
done
rm -rf ral/data/lenses/dep.aug ral/data/lenses/tests

find ral/ -name \*~ -delete

# Reduce the executable as best we can
strip -R .note -R .comment -R .eh_frame -R .eh_frame_hdr -s ral/bin/*
UPX=$(type -p upx)
if [ -n "$UPX" ]
then
    $UPX -qq ral/bin/*
fi

# Add a wrapper to make sure we run with the right setup
cat > ral/bin/ralsh <<'EOF'
#! /bin/bash
topdir=$(readlink --canonicalize $(dirname $0)/..)
export RALSH_DATA_DIR=$topdir/data
export RALSH_LIBEXEC_DIR=$topdir/bin
exec $topdir/bin/ralsh.bin "$@"
EOF
chmod a+x ral/bin/ralsh

tarball=ralsh-$(date +%Y-%m-%dT%H.%M)-$githash.tgz
tar czf $tarball ral
echo
echo Made $tarball
echo
