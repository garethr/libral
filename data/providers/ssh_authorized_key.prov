#! /usr/bin/env mruby
# -*- ruby -*-

class SshAuthorizedKey

  AUTH_KEYS=".ssh/authorized_keys"
  LENS="Authorized_keys"

  # All methods that get called by the runtime get a context argument that
  # provides access to convenience methods

  # INTERFACE METHOD: return YAML metadata
  def describe(ctx)
    puts <<EOS
---
provider:
  type: ssh_authorized_key
  desc: |
    Manage ssh authorized keys in user's .ssh/authorized_keys files
  invoke: json
  actions: [list,find,update]
  suitable: true
  attributes:
    name:
      desc: |
        The SSH key comment. This can be anything, and doesn't need to match
        the original comment from the `.pub` file.

        Due to internal limitations, this must be unique across all user
        accounts; if you want to specify one key for multiple users, you
        must use a different comment for each instance.
    ensure:
      type: enum[absent, present]
    key:
      desc: |
        The public key itself. Generally, a long string of hex characters.
        The `key` attribute may not contain whitespace.
    type:
      desc: The encryption type used.
    user:
      desc: |
        The user account in which the SSH key should be installed.
    options:
      type: array[string]
      desc: |
        Key options; see sshd(8) for possible values.
    target:
      type: string
      desc: The absolute path to the file containing the key
      kind: r
EOS
  end

  # INTERFACE METHOD: return array of resource hashes
  def list(ctx)
    ctx.with_augeas(lens: LENS,
                    incl: ["/home/*/#{AUTH_KEYS}", "/root/#{AUTH_KEYS}"]) do |aug|
      aug.match("(/files/home/*|/files/root)").map do |path|
        user = File::basename(path)
        aug.match("#{path}/#{AUTH_KEYS}/key").map do |key|
          opts = aug.match("#{key}/options/*").map do |opt|
            label = aug.label(opt)
            if value = aug.get(opt)
              "#{label}=#{value}"
            else
              label
            end
          end
          { "key" => aug.get(key),
            "type" => aug.get("#{key}/type"),
            "ensure" => "present",
            "user" => user,
            "options" => opts,
            "name" => aug.get("#{key}/comment"),
            "target" => path.gsub("/files","")+"/#{AUTH_KEYS}"
          }
        end
      end
    end
  end

  # INTERFACE METHOD: find one resource and return it
  #
  # name (string) is the name of the resource to find
  def find(ctx, name)
    # This should be the default implementation inside ralsh
    list(ctx).flatten.find { |e| e["name"] == name } or
      { "name" => name, "ensure" => "absent" }
  end

  # INTERFACE METHOD: update resources
  #
  # gets an array of hashes
  #   { is: current, should: desired }
  # where both current and desired are individual resources and express the
  # current and desired state of the same resource
  #
  # noop is a boolean flag
  #
  # No return value, indicate errors by throwing
  #
  def update(ctx, rsrcs, noop)
    rsrcs.each do |rsrc|
      should = rsrc[:should]
      # attribute names are always strings
      user = should["user"]
      ens  = should["ensure"] || rsrc[:is]["ensure"]
      # ctx.error throws and aborts. If there are many resources, how does
      # the framework know which ones succeeded ?
      ctx.error("the 'user' attribute must be set") unless user

      if user == "root"
        file = "/root/#{AUTH_KEYS}"
      else
        file = "/home/#{user}/#{AUTH_KEYS}"
      end

      ctx.with_augeas(lens: LENS,
                      incl: file,
                      save: true) do |a|
        base = "/files#{file}/key[comment = '#{should["name"]}']"
        # Create basic structure; if that's not in place, horrible things
        # will happen
        unless a.get(base)
          a.set("/files#{file}/key[last()+1]", should["key"])
          a.set("/files#{file}/key[last()]/type", should["type"])
          a.set("/files#{file}/key[last()]/comment", should["name"])
        end

        a.context = base
        if ens == "absent"
          a.rm(".")
        elsif ens == "present"
          a.set(".", should["key"]) if should["key"]
          a.set("type", should["type"]) if should["type"]
          # Turn the array of "opt=val" strings into separate nodes
          # underneath "options"
          if should["options"]
            a.rm("options")
            a.insert("type", "options", true)
            should["options"].each do |opt|
              lbl, val = opt.split("=", 2)
              a.set("options/#{lbl}[last()+1]", val);
            end
          end
        else
          # ralsh makes sure we can't get here
          ctx.error("unknown ensure value '#{ens}'")
        end
      end
    end
  end
end

# This is a script that gets run. This call kicks off processing of ARGV
# and dispatching to the appropriate methods according to libral's JSON
# calling convention
Ral::CLI::run(SshAuthorizedKey)
