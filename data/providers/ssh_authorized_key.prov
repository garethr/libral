#! /usr/bin/env mruby
# -*- ruby -*-

class SshAuthorizedKey

  AUTH_KEYS=".ssh/authorized_keys"
  LENS="Authorized_keys"

  # All methods that get called by the runtime get a context argument that
  # provides access to convenience methods

  # INTERFACE METHOD: return YAML metadata
  def describe(ctx)
    puts <<EOS
---
provider:
  type: ssh_authorized_key
  desc: |
    Manage ssh authorized keys in user's .ssh/authorized_keys files
  invoke: json
  actions: [set, get]
  suitable: true
  attributes:
    name:
      desc: |
        The SSH key comment. This can be anything, and doesn't need to match
        the original comment from the `.pub` file.

        Due to internal limitations, this must be unique across all user
        accounts; if you want to specify one key for multiple users, you
        must use a different comment for each instance.
    ensure:
      type: enum[absent, present]
    key:
      desc: |
        The public key itself. Generally, a long string of hex characters.
        The `key` attribute may not contain whitespace.
    type:
      desc: The encryption type used.
    user:
      desc: |
        The user account in which the SSH key should be installed.
    options:
      type: array[string]
      desc: |
        Key options; see sshd(8) for possible values.
    target:
      type: string
      desc: The absolute path to the file containing the key
      kind: r
EOS
  end

  def get(ctx, names)
    all = names.empty?
    existing = ctx.with_augeas(lens: LENS,
                    incl: ["/home/*/#{AUTH_KEYS}", "/root/#{AUTH_KEYS}"]) do |aug|
      aug.match("(/files/home/*|/files/root)").map do |path|
        user = File::basename(path)
        aug.match("#{path}/#{AUTH_KEYS}/key").map do |key|
          tree = aug.tree(key)
          opts = []
          if tree["options"]
            opts = tree["options"].children.map do |nd|
              if nd.value
                "#{nd.label}=#{nd.value}"
              else
                nd.label
              end
            end
          end
          name = tree["comment"].value
          if all || names.include?(name)
            { "key" => tree.value,
              "type" => tree["type"].value,
              "ensure" => "present",
              "user" => user,
              "options" => opts,
              "name" => name,
              "target" => path.gsub("/files","")+"/#{AUTH_KEYS}"
            }
          else
            nil
          end
        end
      end
    end.flatten.compact
    names = names - existing.map { |x| x["name"] }
    missing = names.map { |n| { "name" => n, "ensure" => "absent" } }
    existing + missing
  end

  def set(ctx, upds, noop)
    ctx.derive_changes!
    upds.each do |upd|
      # attribute names are always strings
      user = upd["user"]
      ens  = upd["ensure"]
      # ctx.error throws and aborts. If there are many resources, how does
      # the framework know which ones succeeded ?
      # FIXME: these problems should be detected by libral long
      # before this hits the provider
      ctx.error("the 'user' attribute must be set") unless user

      if user == "root"
        file = "/root/#{AUTH_KEYS}"
      else
        file = "/home/#{user}/#{AUTH_KEYS}"
      end

      ctx.with_augeas(lens: LENS,
                      incl: file,
                      save: true) do |aug|
        base = "/files#{file}/key[comment = '#{upd.name}']"
        entries = aug.match(base)
        if entries.size > 1
          ctx.error("multiple entries for #{upd.name}")
        end

        if ens=="absent"
          if entries.size == 1
            aug.rm(entries[0])
          end
        elsif ens == "present"
          # Create a scratch tree and move it into place
          t = aug.build("/scratch/key", upd["key"])
          options = upd.should["options"]
          if options && ! options.empty?
            t_opt = t.child("options")
            options.each do |opt|
              lbl, val = opt.split("=", 2)
              t_opt.child(lbl, val);
            end
          end
          t.child("type", upd["type"])
          t.child("comment", upd.name)
          t.mv(base)
        else
          # ralsh makes sure we can't get here
          ctx.error("unknown ensure value '#{ens}'")
        end
      end
    end
  end
end

# This is a script that gets run. This call kicks off processing of ARGV
# and dispatching to the appropriate methods according to libral's JSON
# calling convention
Ral::CLI::run(SshAuthorizedKey)
